// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Based on Golang, outputs an array of patients, patient_id, gender, and disease in json",
    "title": "PatientData",
    "version": "1.0.0"
  },
  "paths": {
    "/patient": {
      "post": {
        "description": "Adds a patient to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "adds a patient item",
        "operationId": "addPatient",
        "parameters": [
          {
            "description": "Patient",
            "name": "patient",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Patient"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "an existing item already exists"
          }
        }
      }
    },
    "/patient_list": {
      "get": {
        "description": "Lists all patient_id's, names, genders, and diseases",
        "produces": [
          "application/json"
        ],
        "summary": "Lists all patients",
        "operationId": "listPatients",
        "responses": {
          "200": {
            "description": "List of all patients",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Patient"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid"
          }
        }
      }
    }
  },
  "definitions": {
    "Patient": {
      "type": "object",
      "properties": {
        "disease": {
          "type": "string",
          "x-go-custom-tag": "db:\"disease\"",
          "x-nullable": true
        },
        "gender": {
          "type": "string",
          "x-go-custom-tag": "db:\"gender\"",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-go-custom-tag": "db:\"name\"",
          "x-nullable": true
        },
        "patient_id": {
          "type": "string",
          "x-go-custom-tag": "db:\"patient_id\"",
          "x-nullable": true
        }
      }
    },
    "Patient_List": {
      "type": "object",
      "properties": {
        "all_patients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Patient"
          }
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Based on Golang, outputs an array of patients, patient_id, gender, and disease in json",
    "title": "PatientData",
    "version": "1.0.0"
  },
  "paths": {
    "/patient": {
      "post": {
        "description": "Adds a patient to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "adds a patient item",
        "operationId": "addPatient",
        "parameters": [
          {
            "description": "Patient",
            "name": "patient",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Patient"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "an existing item already exists"
          }
        }
      }
    },
    "/patient_list": {
      "get": {
        "description": "Lists all patient_id's, names, genders, and diseases",
        "produces": [
          "application/json"
        ],
        "summary": "Lists all patients",
        "operationId": "listPatients",
        "responses": {
          "200": {
            "description": "List of all patients",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Patient"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid"
          }
        }
      }
    }
  },
  "definitions": {
    "Patient": {
      "type": "object",
      "properties": {
        "disease": {
          "type": "string",
          "x-go-custom-tag": "db:\"disease\"",
          "x-nullable": true
        },
        "gender": {
          "type": "string",
          "x-go-custom-tag": "db:\"gender\"",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-go-custom-tag": "db:\"name\"",
          "x-nullable": true
        },
        "patient_id": {
          "type": "string",
          "x-go-custom-tag": "db:\"patient_id\"",
          "x-nullable": true
        }
      }
    },
    "Patient_List": {
      "type": "object",
      "properties": {
        "all_patients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Patient"
          }
        }
      }
    }
  }
}`))
}
